/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * api.proto
 * OpenAPI spec version: version not set
 */
import { useQuery, useMutation } from '@sveltestack/svelte-query';
import type {
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryStoreResult,
	QueryKey
} from '@sveltestack/svelte-query';
import type {
	BatchingServiceQueryBatch200,
	RpcStatus,
	V1QueryBatchRequest,
	V1QueryOneResponse,
	BatchingServiceQueryOneBody,
	V1QueryTwoResponse,
	BatchingServiceQueryTwoBody,
	V1QueryZeroResponse,
	BatchingServiceQueryZeroBody
} from '../index.schemas';
import { httpClient } from '.././http-client';

export const batchingServiceQueryBatch = (v1QueryBatchRequest: V1QueryBatchRequest) => {
	return httpClient<BatchingServiceQueryBatch200>({
		url: `/v1/query/batch`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: v1QueryBatchRequest
	});
};

export type BatchingServiceQueryBatchMutationResult = NonNullable<
	Awaited<ReturnType<typeof batchingServiceQueryBatch>>
>;
export type BatchingServiceQueryBatchMutationBody = V1QueryBatchRequest;
export type BatchingServiceQueryBatchMutationError = RpcStatus;

export const useBatchingServiceQueryBatch = <TError = RpcStatus, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof batchingServiceQueryBatch>>,
		TError,
		{ data: V1QueryBatchRequest },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof batchingServiceQueryBatch>>,
		{ data: V1QueryBatchRequest }
	> = (props) => {
		const { data } = props ?? {};

		return batchingServiceQueryBatch(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof batchingServiceQueryBatch>>,
		TError,
		{ data: V1QueryBatchRequest },
		TContext
	>(mutationFn, mutationOptions);
};
export const batchingServiceQueryOne = (
	name: string,
	batchingServiceQueryOneBody: BatchingServiceQueryOneBody
) => {
	return httpClient<V1QueryOneResponse>({
		url: `/v1/query/one/${name}`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: batchingServiceQueryOneBody
	});
};

export const getBatchingServiceQueryOneQueryKey = (
	name: string,
	batchingServiceQueryOneBody: BatchingServiceQueryOneBody
) => [`/v1/query/one/${name}`, batchingServiceQueryOneBody];

export type BatchingServiceQueryOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof batchingServiceQueryOne>>
>;
export type BatchingServiceQueryOneQueryError = RpcStatus;

export const useBatchingServiceQueryOne = <
	TData = Awaited<ReturnType<typeof batchingServiceQueryOne>>,
	TError = RpcStatus
>(
	name: string,
	batchingServiceQueryOneBody: BatchingServiceQueryOneBody,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof batchingServiceQueryOne>>, TError, TData>;
	}
): UseQueryStoreResult<
	Awaited<ReturnType<typeof batchingServiceQueryOne>>,
	TError,
	TData,
	QueryKey
> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getBatchingServiceQueryOneQueryKey(name, batchingServiceQueryOneBody);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof batchingServiceQueryOne>>> = () =>
		batchingServiceQueryOne(name, batchingServiceQueryOneBody);

	const query = useQuery<Awaited<ReturnType<typeof batchingServiceQueryOne>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!name, ...queryOptions }
	) as UseQueryStoreResult<
		Awaited<ReturnType<typeof batchingServiceQueryOne>>,
		TError,
		TData,
		QueryKey
	> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

export const batchingServiceQueryTwo = (
	name: string,
	batchingServiceQueryTwoBody: BatchingServiceQueryTwoBody
) => {
	return httpClient<V1QueryTwoResponse>({
		url: `/v1/query/two/${name}`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: batchingServiceQueryTwoBody
	});
};

export const getBatchingServiceQueryTwoQueryKey = (
	name: string,
	batchingServiceQueryTwoBody: BatchingServiceQueryTwoBody
) => [`/v1/query/two/${name}`, batchingServiceQueryTwoBody];

export type BatchingServiceQueryTwoQueryResult = NonNullable<
	Awaited<ReturnType<typeof batchingServiceQueryTwo>>
>;
export type BatchingServiceQueryTwoQueryError = RpcStatus;

export const useBatchingServiceQueryTwo = <
	TData = Awaited<ReturnType<typeof batchingServiceQueryTwo>>,
	TError = RpcStatus
>(
	name: string,
	batchingServiceQueryTwoBody: BatchingServiceQueryTwoBody,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof batchingServiceQueryTwo>>, TError, TData>;
	}
): UseQueryStoreResult<
	Awaited<ReturnType<typeof batchingServiceQueryTwo>>,
	TError,
	TData,
	QueryKey
> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getBatchingServiceQueryTwoQueryKey(name, batchingServiceQueryTwoBody);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof batchingServiceQueryTwo>>> = () =>
		batchingServiceQueryTwo(name, batchingServiceQueryTwoBody);

	const query = useQuery<Awaited<ReturnType<typeof batchingServiceQueryTwo>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!name, ...queryOptions }
	) as UseQueryStoreResult<
		Awaited<ReturnType<typeof batchingServiceQueryTwo>>,
		TError,
		TData,
		QueryKey
	> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

export const batchingServiceQueryZero = (
	name: string,
	batchingServiceQueryZeroBody: BatchingServiceQueryZeroBody
) => {
	return httpClient<V1QueryZeroResponse>({
		url: `/v1/query/zero/${name}`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: batchingServiceQueryZeroBody
	});
};

export const getBatchingServiceQueryZeroQueryKey = (
	name: string,
	batchingServiceQueryZeroBody: BatchingServiceQueryZeroBody
) => [`/v1/query/zero/${name}`, batchingServiceQueryZeroBody];

export type BatchingServiceQueryZeroQueryResult = NonNullable<
	Awaited<ReturnType<typeof batchingServiceQueryZero>>
>;
export type BatchingServiceQueryZeroQueryError = RpcStatus;

export const useBatchingServiceQueryZero = <
	TData = Awaited<ReturnType<typeof batchingServiceQueryZero>>,
	TError = RpcStatus
>(
	name: string,
	batchingServiceQueryZeroBody: BatchingServiceQueryZeroBody,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof batchingServiceQueryZero>>, TError, TData>;
	}
): UseQueryStoreResult<
	Awaited<ReturnType<typeof batchingServiceQueryZero>>,
	TError,
	TData,
	QueryKey
> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getBatchingServiceQueryZeroQueryKey(name, batchingServiceQueryZeroBody);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof batchingServiceQueryZero>>> = () =>
		batchingServiceQueryZero(name, batchingServiceQueryZeroBody);

	const query = useQuery<Awaited<ReturnType<typeof batchingServiceQueryZero>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!name, ...queryOptions }
	) as UseQueryStoreResult<
		Awaited<ReturnType<typeof batchingServiceQueryZero>>,
		TError,
		TData,
		QueryKey
	> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
