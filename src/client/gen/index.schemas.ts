/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * api.proto
 * OpenAPI spec version: version not set
 */
export type BatchingServiceQueryZeroBody = {
	argZeroZero?: string;
	argZeroOne?: number;
};

export type BatchingServiceQueryTwoBody = {
	argTwoZero?: number;
	argTwoOne?: string;
	argTwoTwo?: boolean;
};

export type BatchingServiceQueryOneBody = {
	argOneZero?: string;
};

export type BatchingServiceQueryBatch200 = {
	result?: V1QueryBatchResponse;
	error?: RpcStatus;
};

export interface V1QueryZeroResponse {
	respZeroZero?: string;
}

export interface V1QueryZeroRequest {
	name?: string;
	argZeroZero?: string;
	argZeroOne?: number;
}

export type V1QueryType = typeof V1QueryType[keyof typeof V1QueryType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1QueryType = {
	Zero: 'Zero',
	One: 'One',
	Two: 'Two'
} as const;

export interface V1QueryTwoResponse {
	respTwoZero?: string;
}

export interface V1QueryTwoRequest {
	name?: string;
	argTwoZero?: number;
	argTwoOne?: string;
	argTwoTwo?: boolean;
}

export interface V1QueryOneResponse {
	respOneZero?: string;
	respOneOne?: number;
}

export interface V1QueryResponse {
	id?: number;
	type?: V1QueryType;
	zeroResponse?: V1QueryZeroResponse;
	oneResponse?: V1QueryOneResponse;
	twoResponse?: V1QueryTwoResponse;
	error?: string;
}

export interface V1QueryOneRequest {
	name?: string;
	argOneZero?: string;
}

export interface V1QueryRequest {
	id?: number;
	type?: V1QueryType;
	zeroRequest?: V1QueryZeroRequest;
	oneRequest?: V1QueryOneRequest;
	twoRequest?: V1QueryTwoRequest;
}

export interface V1QueryBatchResponse {
	result?: V1QueryResponse;
}

export interface V1QueryBatchRequest {
	queries?: V1QueryRequest[];
}

export interface ProtobufAny {
	'@type'?: string;
	[key: string]: unknown;
}

export interface RpcStatus {
	code?: number;
	message?: string;
	details?: ProtobufAny[];
}
