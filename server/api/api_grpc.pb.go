// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchingServiceClient is the client API for BatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchingServiceClient interface {
	QueryZero(ctx context.Context, in *QueryZeroRequest, opts ...grpc.CallOption) (*QueryZeroResponse, error)
	QueryOne(ctx context.Context, in *QueryOneRequest, opts ...grpc.CallOption) (*QueryOneResponse, error)
	QueryTwo(ctx context.Context, in *QueryTwoRequest, opts ...grpc.CallOption) (*QueryTwoResponse, error)
	QueryBatch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (BatchingService_QueryBatchClient, error)
}

type batchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchingServiceClient(cc grpc.ClientConnInterface) BatchingServiceClient {
	return &batchingServiceClient{cc}
}

func (c *batchingServiceClient) QueryZero(ctx context.Context, in *QueryZeroRequest, opts ...grpc.CallOption) (*QueryZeroResponse, error) {
	out := new(QueryZeroResponse)
	err := c.cc.Invoke(ctx, "/rill.batching.v1.BatchingService/QueryZero", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchingServiceClient) QueryOne(ctx context.Context, in *QueryOneRequest, opts ...grpc.CallOption) (*QueryOneResponse, error) {
	out := new(QueryOneResponse)
	err := c.cc.Invoke(ctx, "/rill.batching.v1.BatchingService/QueryOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchingServiceClient) QueryTwo(ctx context.Context, in *QueryTwoRequest, opts ...grpc.CallOption) (*QueryTwoResponse, error) {
	out := new(QueryTwoResponse)
	err := c.cc.Invoke(ctx, "/rill.batching.v1.BatchingService/QueryTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchingServiceClient) QueryBatch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (BatchingService_QueryBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BatchingService_ServiceDesc.Streams[0], "/rill.batching.v1.BatchingService/QueryBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &batchingServiceQueryBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BatchingService_QueryBatchClient interface {
	Recv() (*QueryBatchResponse, error)
	grpc.ClientStream
}

type batchingServiceQueryBatchClient struct {
	grpc.ClientStream
}

func (x *batchingServiceQueryBatchClient) Recv() (*QueryBatchResponse, error) {
	m := new(QueryBatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchingServiceServer is the server API for BatchingService service.
// All implementations must embed UnimplementedBatchingServiceServer
// for forward compatibility
type BatchingServiceServer interface {
	QueryZero(context.Context, *QueryZeroRequest) (*QueryZeroResponse, error)
	QueryOne(context.Context, *QueryOneRequest) (*QueryOneResponse, error)
	QueryTwo(context.Context, *QueryTwoRequest) (*QueryTwoResponse, error)
	QueryBatch(*QueryBatchRequest, BatchingService_QueryBatchServer) error
	mustEmbedUnimplementedBatchingServiceServer()
}

// UnimplementedBatchingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchingServiceServer struct {
}

func (UnimplementedBatchingServiceServer) QueryZero(context.Context, *QueryZeroRequest) (*QueryZeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryZero not implemented")
}
func (UnimplementedBatchingServiceServer) QueryOne(context.Context, *QueryOneRequest) (*QueryOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOne not implemented")
}
func (UnimplementedBatchingServiceServer) QueryTwo(context.Context, *QueryTwoRequest) (*QueryTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTwo not implemented")
}
func (UnimplementedBatchingServiceServer) QueryBatch(*QueryBatchRequest, BatchingService_QueryBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryBatch not implemented")
}
func (UnimplementedBatchingServiceServer) mustEmbedUnimplementedBatchingServiceServer() {}

// UnsafeBatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchingServiceServer will
// result in compilation errors.
type UnsafeBatchingServiceServer interface {
	mustEmbedUnimplementedBatchingServiceServer()
}

func RegisterBatchingServiceServer(s grpc.ServiceRegistrar, srv BatchingServiceServer) {
	s.RegisterService(&BatchingService_ServiceDesc, srv)
}

func _BatchingService_QueryZero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchingServiceServer).QueryZero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.batching.v1.BatchingService/QueryZero",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchingServiceServer).QueryZero(ctx, req.(*QueryZeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchingService_QueryOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchingServiceServer).QueryOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.batching.v1.BatchingService/QueryOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchingServiceServer).QueryOne(ctx, req.(*QueryOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchingService_QueryTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchingServiceServer).QueryTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.batching.v1.BatchingService/QueryTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchingServiceServer).QueryTwo(ctx, req.(*QueryTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchingService_QueryBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryBatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BatchingServiceServer).QueryBatch(m, &batchingServiceQueryBatchServer{stream})
}

type BatchingService_QueryBatchServer interface {
	Send(*QueryBatchResponse) error
	grpc.ServerStream
}

type batchingServiceQueryBatchServer struct {
	grpc.ServerStream
}

func (x *batchingServiceQueryBatchServer) Send(m *QueryBatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BatchingService_ServiceDesc is the grpc.ServiceDesc for BatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.batching.v1.BatchingService",
	HandlerType: (*BatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryZero",
			Handler:    _BatchingService_QueryZero_Handler,
		},
		{
			MethodName: "QueryOne",
			Handler:    _BatchingService_QueryOne_Handler,
		},
		{
			MethodName: "QueryTwo",
			Handler:    _BatchingService_QueryTwo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryBatch",
			Handler:       _BatchingService_QueryBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
